import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
//import Link from "next/link";
import { api } from "~/utils/api";
import { useState, useEffect } from "react";
//import { set } from "zod";

const Home: NextPage = () => {
  //const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const [character1, setCharacter1] = useState("");
  const [character2, setCharacter2] = useState("");
  const [response, setResponse] = useState("");

  const gptQuery = api.gpt.getGPT3Response.useQuery(
    {
      character1,
      character2,
    },
    { enabled: false } // don't run the query initially
  );

  const handleSubmit = async () => {
    setResponse("Loading...");
    await gptQuery.refetch(); // refetch the data when the button is clicked
  };

  useEffect(() => {
    if (gptQuery.data) {
      console.log(gptQuery.data);
      setResponse(gptQuery.data || "No response received from API.");
    }
  }, [gptQuery.data]);

  return (
    <>
      <Head>
        <title>AI Fight Pits</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            AI <span className="text-[hsl(280,100%,70%)]">Fight</span> Pits
          </h1>

          <div className="flex max-w-2xl flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20">
            <h3 className="text-2xl font-bold">
              Unleash the Ultimate Showdown
            </h3>
            <div className="text-lg">
              Input the names of two characters and ignite an epic battle as our
              AI narrates their clash in vivid detail!
            </div>
          </div>

          <div className="flex-cols-1 sm:flex-cols-2 flex gap-4 md:gap-8">
            <input
              type="text"
              value={character1}
              onChange={(e) => setCharacter1(e.target.value)}
              placeholder="Enter Character 1"
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
            />
            <input
              type="text"
              value={character2}
              onChange={(e) => setCharacter2(e.target.value)}
              placeholder="Enter Character 2"
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
            />
          </div>
          <div className="flex-cols-1 sm:flex-cols-2 flex gap-4 md:gap-8">
            <button
              onClick={() => {
                handleSubmit().catch((error) => console.error(error));
              }}
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
            >
              Submit
            </button>
          </div>
          {response &&
            response.split("\n").filter((paragraph) => paragraph.trim() !== "")
              .length > 0 && (
              <div className="flex max-w-3xl flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20">
                {response
                  .split("\n")
                  .filter((paragraph) => paragraph.trim() !== "")
                  .map((paragraph, i) => (
                    <p key={i} className="text-left text-2xl text-white">
                      {paragraph}
                    </p>
                  ))}
              </div>
            )}

          <div className="flex flex-col items-center gap-2">
            {/* <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p> */}
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
