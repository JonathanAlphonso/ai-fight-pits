generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  currency      Int       @default(0)
  accounts      Account[]
  sessions      Session[]
  bets          Bet[]
  fights        Fight[]
  likes         Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Fighter {
  id          Int    @id @default(autoincrement())
  name        String
  powerRating Int
  description String
}

model Fight {
  id          Int      @id @default(autoincrement())
  fighter1Id  Int
  fighter2Id  Int
  time        DateTime @default(now())
  createdById String
  fightLog    String   @db.Text
  fightWinner String   @default("Draw")
  views       Int      @default(0)
  likeCount   Int      @default(0) // Added this line
  createdBy   User     @relation(fields: [createdById], references: [id])
  likes       Like[]

  @@index([createdById])
}

model Bet {
  id        Int      @id @default(autoincrement())
  amount    Int
  time      DateTime @default(now())
  fightId   Int
  userId    String
  fighterId Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Like {
  userId  String
  fightId Int
  user    User   @relation(fields: [userId], references: [id])
  fight   Fight  @relation(fields: [fightId], references: [id], onDelete: Cascade)

  @@id([userId, fightId])
  @@index([userId])
  @@index([fightId])
}
